// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// bitwise operations Program in C++
// 位运算
//
//===----------------------------------------------------------------------===//


#include <iostream>

int main() {
  // 二进制每一位进行“与”运算（有0为0，其他为1）
  // 0000 0101
  // 0000 0011
  // ------------
  // 0000 0001    1
  int bit_and = 5 & 3;
  std::cout << "Result of 5 & 3: " << bit_and << std::endl;


  // 二进制每一位进行“或”运算（有1为1，其他为0）
  // 0000 0101
  // 0000 0011
  // ------------
  // 0000 0111    7
  int bit_or = 5 | 3;
  std::cout << "Result of 5 | 3: " << bit_or << std::endl;


  // 二进制每一位进行“异或”运算（相同为0，不同为1）
  // 0000 0101
  // 0000 0011
  // ------------
  // 0000 0110    6
  int bit_xor = 5 ^ 3; 
  std::cout << "Result of 5 ^ 3: " << bit_xor << std::endl;

  // 二进制的每一位都取反
  // 0000 0101
  // ------------
  // 1111 1010    -6 (在C++中，负数使用补码表示)
  int bit_not = ~5;
  std::cout << "Result of ~5: " << bit_not << std::endl;

  // 左移操作符，将二进制数向左移动指定的位数
  // 0000 0101 << 1
  // ------------
  // 0000 1010    10
  int bit_left_shift = 5 << 1;
  std::cout << "Result of 5 << 1: " << bit_left_shift << std::endl;

  // 右移操作符，将二进制数向右移动指定的位数
  // 0000 0101 >> 1
  // ------------
  // 0000 0010    2
  // 注意：右移操作符在有符号整数上表现为算术右移（符号位不变），在无符号整数上表现为逻辑右移
  int bit_right_shift = 5 >> 1;
  std::cout << "Result of 5 >> 1: " << bit_right_shift << std::endl;

  return 0;
}
